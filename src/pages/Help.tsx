import { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Header from "@/components/layout/Header";
import Footer from "@/components/layout/Footer";
import Icon from "@/components/ui/icon";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Label } from "@/components/ui/label";
import { useAuth } from "@/contexts/AuthContext";
import { useToast } from "@/hooks/use-toast";

const Help = () => {
  const { user, isAuthenticated } = useAuth();
  const { toast } = useToast();
  const navigate = useNavigate();

  const [formData, setFormData] = useState({
    motoModel: "",
    motoYear: "",
    motoPlate: "",
    problemDescription: "",
    location: "",
    phone: user?.phone || "",
  });

  const [isLoadingLocation, setIsLoadingLocation] = useState(false);

  useEffect(() => {
    if (!isAuthenticated) {
      toast({
        title: "–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è",
        description: "–í–æ–π–¥–∏—Ç–µ, —á—Ç–æ–±—ã –æ—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –ø–æ–º–æ—â—å",
        variant: "destructive",
      });
      navigate("/");
    }
  }, [isAuthenticated, navigate, toast]);

  const getCurrentLocation = () => {
    setIsLoadingLocation(true);
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const { latitude, longitude } = position.coords;
          setFormData(prev => ({
            ...prev,
            location: `${latitude.toFixed(6)}, ${longitude.toFixed(6)}`
          }));
          setIsLoadingLocation(false);
          toast({
            title: "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∞",
            description: "–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∑–∞—è–≤–∫—É",
          });
        },
        (error) => {
          setIsLoadingLocation(false);
          toast({
            title: "–û—à–∏–±–∫–∞ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏",
            description: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã. –£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –≤—Ä—É—á–Ω—É—é.",
            variant: "destructive",
          });
        }
      );
    } else {
      setIsLoadingLocation(false);
      toast({
        title: "–ì–µ–æ–ª–æ–∫–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        description: "–í–∞—à –±—Ä–∞—É–∑–µ—Ä –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
        variant: "destructive",
      });
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!formData.motoModel || !formData.problemDescription || !formData.location) {
      toast({
        title: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è",
        description: "–ú–æ–¥–µ–ª—å –º–æ—Ç–æ—Ü–∏–∫–ª–∞, –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –∏ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã",
        variant: "destructive",
      });
      return;
    }

    toast({
      title: "–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!",
      description: "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è",
    });

    setFormData({
      motoModel: "",
      motoYear: "",
      motoPlate: "",
      problemDescription: "",
      location: "",
      phone: user?.phone || "",
    });
  };

  if (!isAuthenticated) {
    return null;
  }

  return (
    <div className="min-h-screen flex flex-col">
      <Header />
      <main className="flex-grow container mx-auto px-4 py-8 mt-16">
        <div className="max-w-2xl mx-auto">
          <h1 className="text-3xl font-bold mb-2">–ó–∞—è–≤–∫–∞ –Ω–∞ –ø–æ–º–æ—â—å</h1>
          <p className="text-muted-foreground mb-8">
            –ó–∞–ø–æ–ª–Ω–∏—Ç–µ —Ñ–æ—Ä–º—É, –∏ –º—ã –æ—Ä–≥–∞–Ω–∏–∑—É–µ–º –ø–æ–º–æ—â—å –Ω–∞ –¥–æ—Ä–æ–≥–µ
          </p>

          <div className="bg-card rounded-xl p-6 border-2 border-orange/30 shadow-lg mb-6">
            <div className="flex items-center gap-3 mb-4">
              <Icon name="User" className="w-6 h-6 text-orange" />
              <h2 className="text-xl font-bold">–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ</h2>
            </div>
            <div className="space-y-2">
              <p className="text-foreground"><span className="text-muted-foreground">–ò–º—è:</span> {user?.name}</p>
              <p className="text-foreground"><span className="text-muted-foreground">–¢–µ–ª–µ—Ñ–æ–Ω:</span> {user?.phone || "–ù–µ —É–∫–∞–∑–∞–Ω"}</p>
            </div>
          </div>

          <form onSubmit={handleSubmit} className="space-y-6">
            <div className="bg-card rounded-xl p-6 border-2 border-orange/30 shadow-lg">
              <div className="flex items-center gap-3 mb-4">
                <Icon name="Bike" className="w-6 h-6 text-orange" />
                <h2 className="text-xl font-bold">–î–∞–Ω–Ω—ã–µ –º–æ—Ç–æ—Ü–∏–∫–ª–∞</h2>
              </div>
              
              <div className="space-y-4">
                <div>
                  <Label htmlFor="motoModel">–ú–æ–¥–µ–ª—å –º–æ—Ç–æ—Ü–∏–∫–ª–∞ *</Label>
                  <Input
                    id="motoModel"
                    placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Honda CB650R"
                    value={formData.motoModel}
                    onChange={(e) => setFormData({...formData, motoModel: e.target.value})}
                    required
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <Label htmlFor="motoYear">–ì–æ–¥ –≤—ã–ø—É—Å–∫–∞</Label>
                    <Input
                      id="motoYear"
                      placeholder="2023"
                      value={formData.motoYear}
                      onChange={(e) => setFormData({...formData, motoYear: e.target.value})}
                    />
                  </div>
                  <div>
                    <Label htmlFor="motoPlate">–ì–æ—Å. –Ω–æ–º–µ—Ä</Label>
                    <Input
                      id="motoPlate"
                      placeholder="–ê123–ë–í72"
                      value={formData.motoPlate}
                      onChange={(e) => setFormData({...formData, motoPlate: e.target.value})}
                    />
                  </div>
                </div>

                <div>
                  <Label htmlFor="problemDescription">–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã *</Label>
                  <Textarea
                    id="problemDescription"
                    placeholder="–û–ø–∏—à–∏—Ç–µ, —á—Ç–æ —Å–ª—É—á–∏–ª–æ—Å—å: –ø–æ–ª–æ–º–∫–∞, –î–¢–ü, –Ω—É–∂–Ω–∞ —ç–≤–∞–∫—É–∞—Ü–∏—è –∏ —Ç.–¥."
                    value={formData.problemDescription}
                    onChange={(e) => setFormData({...formData, problemDescription: e.target.value})}
                    rows={4}
                    required
                  />
                </div>
              </div>
            </div>

            <div className="bg-card rounded-xl p-6 border-2 border-orange/30 shadow-lg">
              <div className="flex items-center gap-3 mb-4">
                <Icon name="MapPin" className="w-6 h-6 text-orange" />
                <h2 className="text-xl font-bold">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</h2>
              </div>
              
              <div className="space-y-4">
                <div>
                  <Label htmlFor="location">–ê–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã *</Label>
                  <Input
                    id="location"
                    placeholder="–£–∫–∞–∂–∏—Ç–µ –∞–¥—Ä–µ—Å –∏–ª–∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã"
                    value={formData.location}
                    onChange={(e) => setFormData({...formData, location: e.target.value})}
                    required
                  />
                </div>

                <Button
                  type="button"
                  variant="outline"
                  className="w-full"
                  onClick={getCurrentLocation}
                  disabled={isLoadingLocation}
                >
                  <Icon name="Navigation" className="w-5 h-5 mr-2" />
                  {isLoadingLocation ? "–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç..." : "–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ"}
                </Button>
              </div>
            </div>

            <Button type="submit" className="w-full bg-orange hover:bg-orange/90" size="lg">
              <Icon name="Send" className="w-5 h-5 mr-2" />
              –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É
            </Button>
          </form>

          <div className="mt-8 bg-muted/50 rounded-lg p-4">
            <p className="text-sm text-muted-foreground text-center">
              üí° –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –æ–ø–µ—Ä–∞—Ç–æ—Ä —Å–ª—É–∂–±—ã –ø–æ–º–æ—â–∏
            </p>
          </div>
        </div>
      </main>
      <Footer />
    </div>
  );
};

export default Help;
